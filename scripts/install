#!/bin/sh

# Put your Project name here. Must be alphanumeric only.
project="dynamictable"


run_command() {
    $@
    if [ $? -ne 0 ]; then
        echo "$@"
        echo "command failed, aborting"
        exit 2
    fi
}

echo
echo "  WARNING  This script will overwrite your existing configuration files."
echo "           It will also (re)create the database, destroying all its content"
echo
echo "  Hit Ctrl-C now to exit or press Enter to begin"

read key

which_perl=`which perl`
if [ $? -ne 0 ]; then
    echo "Perl not found, aborting"
    exit 1
fi

echo "===> Installing production environment dependencies..."
echo
run_command ./scripts/update prod

echo
echo "===> Configuration"
echo
run_command cd config/autoload
rm -f *local.php

run_command cp exception.local.php.dist exception.local.php

input="none"
while [ "$input" != "y" -a "$input" != "n" -a "$input" != "" ]; do
    read -p "* Do you want to display PHP exceptions to the user? y/[n]: " input
done
if [ "$input" = "y" ]; then
    display="true"
else
    display="false"
fi

run_command perl -pi -e "s/(\s*'display'\s*=>\s*)(true|false)(.*)/\${1}$display\${3}/" "exception.local.php"

echo
echo "  File config/autoload/exception.local.php created"
echo "  Additionally you can have exceptions be reported via email - edit the file"

run_command cp mail.local.php.dist mail.local.php

input="none"
echo
while [ "$input" != "sendmail" -a "$input" != "smtp" -a "$input" != "" ]; do
    read -p "* What transport should be used for email messages? sendmail/[smtp]: " input
done
if [ "$input" = "sendmail" ]; then
    transport="sendmail"
else
    transport="smtp"
fi

run_command perl -pi -e "s/(\s*'transport'\s*=>\s*')(sendmail|smtp)('.*)/\${1}$transport\${3}/" "mail.local.php"

if [ "$transport" = "smtp" ]; then
    read -p "  SMTP host? [127.0.0.1]: " input
    if [ "$input" = "" ]; then
        input="127.0.0.1"
    fi
    run_command perl -pi -e "s/(\s*'host'\s*=>\s*')(127\.0\.0\.1)('.*)/\${1}$input\${3}/" "mail.local.php"

    read -p "  SMTP port? [25]: " input
    if [ "$input" = "" ]; then
        input=25
    fi
    run_command perl -pi -e "s/(\s*'port'\s*=>\s*)(25)(.*)/\${1}$input\${3}/" "mail.local.php"
fi

echo
echo "  File config/autoload/mail.local.php created"

input="none"
echo
while [ "$input" != "y" -a "$input" != "n" -a "$input" != "" ]; do
    read -p "* Will you be using PHP sessions? [y]/n: " input
done

if [ "$input" != "n" ]; then
    run_command cp session.local.php.dist session.local.php

    read -p "  Session name (alphanumeric only)? [$project]: " input
    if [ "$input" = "" ]; then
        input="$project"
    fi

    run_command perl -pi -e "s/(\s*'name'\s*=>\s*')(zf2skeleton)('.*)/\${1}$input\${3}/" "session.local.php"

    echo
    echo "  File config/autoload/session.local.php created"
    echo "  Additionally you can switch session to use memcached instead of files"
    echo "  and change default session lifetime - edit the file"
fi

input="none"
echo
while [ "$input" != "y" -a "$input" != "n" -a "$input" != "" ]; do
    read -p "* Do you need Doctrine SQL ORM? [y]/n: " input
done

using_orm=0
if [ "$input" != "n" ]; then
    using_orm=1

    input="none"
    while [ "$input" != "mysql" -a "$input" != "postgresql" -a "$input" != "" ]; do
        read -p "  What is the SQL server? [mysql]/postgresql: " input
    done

    if [ "$input" = "postgresql" ]; then
        dbserver="postgresql"
        defaultport=5432
        dbroot="pgsql"
    else
        dbserver="mysql"
        defaultport=3306
        dbroot="root"
    fi

    read -p "  SQL server hostname? [localhost]: " dbhost
    if [ "$dbhost" = "" ]; then
        dbhost="localhost"
    fi

    read -p "  SQL server port? [$defaultport]: " dbport
    if [ "$dbport" = "" ]; then
        dbport=$defaultport
    fi

    read -p "  SQL server account name? [$project]: " dbuser
    if [ "$dbuser" = "" ]; then
        dbuser=$project
    fi

    read -p "  SQL server acount password (alphanumeric)? " dbpassword

    read -p "  SQL database name? [$project]: " dbname
    if [ "$dbname" = "" ]; then
        dbname=$project
    fi

    run_command cp $dbserver.local.php.dist $dbserver.local.php

    run_command perl -pi -e "s/(\s*'host'\s*=>\s*')(localhost)('.*)/\${1}$dbhost\${3}/" "$dbserver.local.php"
    run_command perl -pi -e "s/(\s*'port'\s*=>\s*)($defaultport)(.*)/\${1}$dbport\${3}/" "$dbserver.local.php"
    run_command perl -pi -e "s/(\s*'user'\s*=>\s*')(dbuser)('.*)/\${1}$dbuser\${3}/" "$dbserver.local.php"
    run_command perl -pi -e "s/(\s*'password'\s*=>\s*')(dbpassword)('.*)/\${1}$dbpassword\${3}/" "$dbserver.local.php"
    run_command perl -pi -e "s/(\s*'dbname'\s*=>\s*')(dbname)('.*)/\${1}$dbname\${3}/" "$dbserver.local.php"

    echo
    echo "  File config/autoload/$dbserver.local.php created"
fi

input="none"
echo
while [ "$input" != "y" -a "$input" != "n" -a "$input" != "" ]; do
    read -p "* Do you need Doctrine Mongo ODM? y/[n]: " input
done

using_odm=0
if [ "$input" = "y" ]; then
    using_odm=1

    mongodefaultport=27017
    mongoroot="root"
    mongoauthdb="admin"

    read -p "  Mongo server hostname? [localhost]: " mongohost
    if [ "$mongohost" = "" ]; then
        mongohost="localhost"
    fi

    read -p "  Mongo server port? [$mongodefaultport]: " mongoport
    if [ "$mongoport" = "" ]; then
        mongoport=$mongodefaultport
    fi

    read -p "  Mongo server account name? [$project]: " mongouser
    if [ "$mongouser" = "" ]; then
        mongouser=$project
    fi

    read -p "  Mongo server acount password (alphanumeric)? " mongopassword

    read -p "  Mongo database name? [$project]: " mongoname
    if [ "$mongoname" = "" ]; then
        mongoname=$project
    fi

    run_command cp mongodb.local.php.dist mongodb.local.php

    run_command perl -pi -e "s/(\s*'server'\s*=>\s*')(localhost)('.*)/\${1}$mongohost\${3}/" "mongodb.local.php"
    run_command perl -pi -e "s/(\s*'port'\s*=>\s*)($mongodefaultport)(.*)/\${1}$mongoport\${3}/" "mongodb.local.php"
    run_command perl -pi -e "s/(\s*'user'\s*=>\s*')(dbuser)('.*)/\${1}$mongouser\${3}/" "mongodb.local.php"
    run_command perl -pi -e "s/(\s*'password'\s*=>\s*')(dbpassword)('.*)/\${1}$mongopassword\${3}/" "mongodb.local.php"
    run_command perl -pi -e "s/(\s*'dbname'\s*=>\s*')(dbname)('.*)/\${1}$mongoname\${3}/" "mongodb.local.php"
    run_command perl -pi -e "s/(\s*'default_db'\s*=>\s*')(dbname)('.*)/\${1}$mongoname\${3}/" "mongodb.local.php"

    echo
    echo "  File config/autoload/mongodb.local.php created"
fi

if [ $using_orm -eq 1 ]; then
    run_command perl -pi -e "s/\/?\/?(\s*'DoctrineORMModule'\s*.*)/\${1}/" "../application.config.php"
else
    run_command perl -pi -e "s/\/?\/?(\s*'DoctrineORMModule'\s*.*)/\/\/\${1}/" "../application.config.php"
fi

if [ $using_odm -eq 1 ]; then
    run_command perl -pi -e "s/\/?\/?(\s*'DoctrineMongoODMModule'\s*.*)/\${1}/" "../application.config.php"
else
    run_command perl -pi -e "s/\/?\/?(\s*'DoctrineMongoODMModule'\s*.*)/\/\/\${1}/" "../application.config.php"
fi

if [ $using_orm -eq 0 -a $using_odm -eq 0 ]; then
    run_command perl -pi -e "s/\/?\/?(\s*'DoctrineModule'\s*.*)/\/\/\${1}/" "../application.config.php"
else
    run_command perl -pi -e "s/\/?\/?(\s*'DoctrineModule'\s*.*)/\${1}/" "../application.config.php"
fi

input="none"
echo
while [ "$input" != "y" -a "$input" != "n" -a "$input" != "" ]; do
    read -p "* Do you want to use Memcached? y/[n]: " input
done

if [ "$input" = "y" ]; then
    read -p "  Namespace to use? [$project]: " input
    if [ "$input" = "" ]; then
        input="$project"
    fi

    run_command cp memcached.local.php.dist memcached.local.php
    run_command perl -pi -e "s/(\s*'namespace'\s*=>\s*')(Skeleton)('.*)/\${1}$input\${3}/" "memcached.local.php"

    echo
    echo "  File config/autoload/memcached.local.php created"
    echo "  Additionally you can change host/port and cache expiration time in the file"
fi

run_command cd ../..
echo
echo "===> Initialization"
echo

if [ $using_orm -eq 1 ]; then
    input="none"
    echo
    while [ "$input" != "y" -a "$input" != "n" -a "$input" != "" ]; do
        read -p "* Create the SQL database and user? [y]/n: " input
    done

    if [ "$input" != "n" ]; then
        read -p "  SQL server administrator account name? [$dbroot]: " input
        if [ "$input" != "" ]; then
            dbroot="$input"
        fi

        dbscript="/tmp/$project.install"
        if [ "$dbserver" = "mysql" ]; then
            echo "DROP DATABASE IF EXISTS $dbname;" > $dbscript
            echo "CREATE DATABASE $dbname CHARACTER SET utf8;" >> $dbscript
            echo "GRANT USAGE ON *.* TO '$dbuser'@'localhost';" >> $dbscript
            echo "DROP USER '$dbuser'@'localhost';" >> $dbscript
            echo "CREATE USER '$dbuser'@'localhost' IDENTIFIED BY '$dbpassword';" >> $dbscript
            echo "GRANT ALL PRIVILEGES ON $dbname.* TO '$dbuser'@'localhost';" >> $dbscript
            echo "FLUSH PRIVILEGES;" >> $dbscript
        else
            echo "DROP DATABASE IF EXISTS $dbname;" > $dbscript
            echo "CREATE DATABASE $dbname;" >> $dbscript
            echo "DROP USER IF EXISTS $dbuser;" >> $dbscript
            echo "CREATE USER $dbuser WITH PASSWORD '$dbpassword';" >> $dbscript
            echo "GRANT ALL PRIVILEGES ON DATABASE $dbname TO $dbuser;" >> $dbscript
        fi

        echo
        echo "  The following code will be executed:"
        echo
        cat $dbscript
        echo

        echo "  Press Enter to continue, be ready to provide DB administrator password"
        read input

        if [ "$dbserver" = "mysql" ]; then
            run_command mysql -u $dbroot -p < $dbscript
        else
            run_command psql -U $dbroot -d template1 < $dbscript
        fi

        rm -f $dbscript

        echo
        echo "* Creating the schema..."

        if [ "$dbserver" = "mysql" ]; then
            if [ "$dbpassword" = "" ]; then
                run_command mysql -u$dbuser $dbname < database/$dbserver.schema.sql
            else
                run_command mysql -u$dbuser -p$dbpassword $dbname < database/$dbserver.schema.sql
            fi
        else
            run_command psql -U $dbuser -d $dbname < database/$dbserver.schema.sql
        fi
    fi
fi

if [ $using_odm -eq 1 ]; then
    input="none"
    echo
    while [ "$input" != "y" -a "$input" != "n" -a "$input" != "" ]; do
        read -p "* Create Mongo user and database? [y]/n: " input
    done

    if [ "$input" != "n" ]; then
        input="none"
        while [ "$input" != "y" -a "$input" != "n" -a "$input" != "" ]; do
            read -p "  Mongo requires authentication? [y]/n: " input
        done

        mongoneedauth=0
        if [ "$input" != "n" ]; then
            mongoneedauth=1
        fi

        if [ $mongoneedauth -eq 1 ]; then
            read -p "  Mongo server administrator account name? [$mongoroot]: " input
            if [ "$input" != "" ]; then
                mongoroot="$input"
            fi

            read -p "  Mongo server authentication database? [$mongoauthdb]: " input
            if [ "$input" != "" ]; then
                mongoauthdb="$input"
            fi
        fi

        dbscript="/tmp/$project.install.js"
        echo "db = db.getSiblingDB('$mongoname')" > $dbscript
        echo "db.getCollectionNames().forEach(" >> $dbscript
        echo "  function(collection_name) {" >> $dbscript
        echo "    db[collection_name].remove({})" >> $dbscript
        echo "  }" >> $dbscript
        echo ")" >> $dbscript
        echo "db.runCommand({ dropAllUsersFromDatabase: 1 })" >> $dbscript
        echo "db.runCommand({ dropDatabase: 1 })" >> $dbscript
        echo "db = db.getSiblingDB('$mongoname')" >> $dbscript
        echo "db.createUser(" >> $dbscript
        echo "  {" >> $dbscript
        echo "    user: \"$mongouser\"," >> $dbscript
        echo "    pwd: \"$mongopassword\"," >> $dbscript
        echo "    roles: [" >> $dbscript
        echo "      { role: \"userAdmin\", db: \"$mongoname\" }," >> $dbscript
        echo "      { role: \"readWrite\", db: \"$mongoname\" }," >> $dbscript
        echo "    ]" >> $dbscript
        echo "  }" >> $dbscript
        echo ")" >> $dbscript

        echo
        echo "  The following code will be executed:"
        echo
        cat $dbscript
        echo

        echo "  Press Enter to continue, be ready to provide DB administrator password if required"
        read input

        if [ $mongoneedauth -eq 1 ]; then
            run_command mongo -u $mongoroot -p --authenticationDatabase $mongoauthdb $dbscript
        else
            run_command mongo $dbscript
        fi

        rm -f $dbscript
    fi
fi

input="none"
echo
while [ "$input" != "y" -a "$input" != "n" -a "$input" != "" ]; do
    read -p "* Populate the databases [y]/n: " input
done

if [ "$input" != "n" ]; then
    echo
    echo "* Populating the databases..."

    run_command php public.prod/index.php populate-db
fi

echo
echo "===> All done"
